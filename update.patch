diff --git a/ginkgo/internal/profiles_and_reports.go b/ginkgo/internal/profiles_and_reports.go
index b20e5e4..d027478 100644
--- a/ginkgo/internal/profiles_and_reports.go
+++ b/ginkgo/internal/profiles_and_reports.go
@@ -9,7 +9,6 @@ import (
 	"regexp"
 	"strconv"

-	"github.com/google/pprof/profile"
 	"github.com/bsm/ginkgo/v2/reporters"
 	"github.com/bsm/ginkgo/v2/types"
 )
@@ -191,39 +190,3 @@ func GetCoverageFromCoverProfile(profile string) (float64, error) {

 	return coverage, nil
 }
-
-func MergeProfiles(profilePaths []string, destination string) error {
-	profiles := []*profile.Profile{}
-	for _, profilePath := range profilePaths {
-		proFile, err := os.Open(profilePath)
-		if err != nil {
-			return fmt.Errorf("Could not open profile: %s\n%s", profilePath, err.Error())
-		}
-		prof, err := profile.Parse(proFile)
-		if err != nil {
-			return fmt.Errorf("Could not parse profile: %s\n%s", profilePath, err.Error())
-		}
-		profiles = append(profiles, prof)
-		os.Remove(profilePath)
-	}
-
-	mergedProfile, err := profile.Merge(profiles)
-	if err != nil {
-		return fmt.Errorf("Could not merge profiles:\n%s", err.Error())
-	}
-
-	outFile, err := os.Create(destination)
-	if err != nil {
-		return fmt.Errorf("Could not create merged profile %s:\n%s", destination, err.Error())
-	}
-	err = mergedProfile.Write(outFile)
-	if err != nil {
-		return fmt.Errorf("Could not write merged profile %s:\n%s", destination, err.Error())
-	}
-	err = outFile.Close()
-	if err != nil {
-		return fmt.Errorf("Could not close merged profile %s:\n%s", destination, err.Error())
-	}
-
-	return nil
-}
diff --git a/ginkgo/internal/run.go b/ginkgo/internal/run.go
index fccbcb6..c04ef6a 100644
--- a/ginkgo/internal/run.go
+++ b/ginkgo/internal/run.go
@@ -255,26 +255,6 @@ func runParallel(suite TestSuite, ginkgoConfig types.SuiteConfig, reporterConfig
 			fmt.Fprintf(os.Stdout, "coverage: %.1f%% of statements\n", coverage)
 		}
 	}
-	if len(blockProfiles) > 0 {
-		blockProfile := AbsPathForGeneratedAsset(goFlagsConfig.BlockProfile, suite, cliConfig, 0)
-		err := MergeProfiles(blockProfiles, blockProfile)
-		command.AbortIfError("Failed to combine blockprofiles", err)
-	}
-	if len(cpuProfiles) > 0 {
-		cpuProfile := AbsPathForGeneratedAsset(goFlagsConfig.CPUProfile, suite, cliConfig, 0)
-		err := MergeProfiles(cpuProfiles, cpuProfile)
-		command.AbortIfError("Failed to combine cpuprofiles", err)
-	}
-	if len(memProfiles) > 0 {
-		memProfile := AbsPathForGeneratedAsset(goFlagsConfig.MemProfile, suite, cliConfig, 0)
-		err := MergeProfiles(memProfiles, memProfile)
-		command.AbortIfError("Failed to combine memprofiles", err)
-	}
-	if len(mutexProfiles) > 0 {
-		mutexProfile := AbsPathForGeneratedAsset(goFlagsConfig.MutexProfile, suite, cliConfig, 0)
-		err := MergeProfiles(mutexProfiles, mutexProfile)
-		command.AbortIfError("Failed to combine mutexprofiles", err)
-	}

 	return suite
 }
diff --git a/ginkgo/main.go b/ginkgo/main.go
index 6a78a63..c638b65 100644
--- a/ginkgo/main.go
+++ b/ginkgo/main.go
@@ -6,9 +6,6 @@ import (

 	"github.com/bsm/ginkgo/v2/ginkgo/build"
 	"github.com/bsm/ginkgo/v2/ginkgo/command"
-	"github.com/bsm/ginkgo/v2/ginkgo/generators"
-	"github.com/bsm/ginkgo/v2/ginkgo/labels"
-	"github.com/bsm/ginkgo/v2/ginkgo/outline"
 	"github.com/bsm/ginkgo/v2/ginkgo/run"
 	"github.com/bsm/ginkgo/v2/ginkgo/unfocus"
 	"github.com/bsm/ginkgo/v2/ginkgo/watch"
@@ -21,10 +18,6 @@ func GenerateCommands() []command.Command {
 	return []command.Command{
 		watch.BuildWatchCommand(),
 		build.BuildBuildCommand(),
-		generators.BuildBootstrapCommand(),
-		generators.BuildGenerateCommand(),
-		labels.BuildLabelsCommand(),
-		outline.BuildOutlineCommand(),
 		unfocus.BuildUnfocusCommand(),
 		BuildVersionCommand(),
 	}
diff --git a/internal/output_interceptor.go b/internal/output_interceptor.go
index 6f7c386..1f985e8 100644
--- a/internal/output_interceptor.go
+++ b/internal/output_interceptor.go
@@ -55,6 +55,10 @@ type OutputInterceptor interface {
 	Shutdown()
 }

+func NewOutputInterceptor() OutputInterceptor {
+	return NewOSGlobalReassigningOutputInterceptor()
+}
+
 type NoopOutputInterceptor struct{}

 func (interceptor NoopOutputInterceptor) StartInterceptingOutput()                      {}
