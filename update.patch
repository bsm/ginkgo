diff --git a/ginkgo/main.go b/ginkgo/main.go
index 62a1af9..00c6518 100644
--- a/ginkgo/main.go
+++ b/ginkgo/main.go
@@ -170,14 +170,11 @@ func init() {
 	DefaultCommand = BuildRunCommand()
 	Commands = append(Commands, BuildWatchCommand())
 	Commands = append(Commands, BuildBuildCommand())
-	Commands = append(Commands, BuildBootstrapCommand())
-	Commands = append(Commands, BuildGenerateCommand())
 	Commands = append(Commands, BuildNodotCommand())
 	Commands = append(Commands, BuildConvertCommand())
 	Commands = append(Commands, BuildUnfocusCommand())
 	Commands = append(Commands, BuildVersionCommand())
 	Commands = append(Commands, BuildHelpCommand())
-	Commands = append(Commands, BuildOutlineCommand())
 }
 
 func main() {
diff --git a/ginkgo/run_command.go b/ginkgo/run_command.go
index 047fb91..8fffc27 100644
--- a/ginkgo/run_command.go
+++ b/ginkgo/run_command.go
@@ -280,6 +280,11 @@ func (r *SpecRunner) randomizeOrder(runners []*testrunner.TestRunner) []*testrun
 	return randomizedRunners
 }
 
+func fileExists(path string) bool {
+	_, err := os.Stat(path)
+	return err == nil || !os.IsNotExist(err)
+}
+
 func orcMessage(iteration int) string {
 	if iteration < 10 {
 		return ""
diff --git a/internal/remote/output_interceptor.go b/internal/remote/output_interceptor.go
index 5154abe..9ebe9af 100644
--- a/internal/remote/output_interceptor.go
+++ b/internal/remote/output_interceptor.go
@@ -1,6 +1,9 @@
 package remote
 
-import "os"
+import (
+	"errors"
+	"os"
+)
 
 /*
 The OutputInterceptor is used by the ForwardingReporter to
@@ -11,3 +14,27 @@ type OutputInterceptor interface {
 	StopInterceptingAndReturnOutput() (string, error)
 	StreamTo(*os.File)
 }
+
+func NewOutputInterceptor() OutputInterceptor {
+	return &outputInterceptor{}
+}
+
+type outputInterceptor struct {
+	intercepting bool
+}
+
+func (interceptor *outputInterceptor) StartInterceptingOutput() error {
+	if interceptor.intercepting {
+		return errors.New("Already intercepting output!")
+	}
+	interceptor.intercepting = true
+
+	return nil
+}
+
+func (interceptor *outputInterceptor) StopInterceptingAndReturnOutput() (string, error) {
+	interceptor.intercepting = false
+	return "", nil
+}
+
+func (interceptor *outputInterceptor) StreamTo(*os.File) {}
